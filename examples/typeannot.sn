let i : Int = 3
let f : Float = 2.3
let s : String = "abc"


typedef List a =
  Nil
| Cons of a * List a

let rec map (f : a -> b) (l : List a) : List b =
  match l with
    Nil -> Nil
  | Cons(x,xs) -> Cons(f x,map f xs)

let head (l : List a) : a =
  match l with
    Cons(x,xs) -> (x : a)

let head_int_list (l : List Int) : Int =
  match l with
    Cons(x,xs) -> x

let nil : List a = Nil


typedef Either (a,b) =
  Left of a
| Right of b

let left_int : Either (Int,a) = Left 1


let local_let_annot =
  let i : Int = 1 in
  let f (x : a) : a = x in
  f i


let (|>) (x : a) (y : a -> b) : b = y x

let pipe_example : Int =
  Cons(1,(Cons(2,Nil))) 
  |> map (fun x -> x)
  |> head
  |> fun (x : Int) -> Cons(x,Nil)
  |> head_int_list

let main = pipe_example