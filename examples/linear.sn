let id (x : ![1]{Int}) : Int = x

let fst (x : ![2]{Int}) (y : ![1]{Int}) : Int = x

let snd (x : ![1]{Int}) (y : ![1]{Int}) : Int = y

let pair (x : ![2]{Int}) : ![∞]{(Int * Int)} = !(x,x)

let pair_lin (x : ![2]{Int}) : (Int * Int) = (x,x)

let non_restricted (x : ![3]{Int}) : (Int * Int * Int) = (x,x,x)

let f =
  fun (x : ![2]{Int}) -> (x,x)

let pair_apply = pair !(id !1)

let fst_triple =
  match pair_lin !1 with (a,_) -> a

let i : ![3]{Int} = !3

let apply_pair_i = pair i

let g (x : ![2]{Int}) =
  (pair !x,pair !x)