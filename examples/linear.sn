let id (x : ![1]{Int}) : Int = x

let fst (x : ![2]{Int}) (y : ![1]{Int}) : Int = x

let snd (x : ![1]{Int}) (y : ![1]{Int}) : Int = y

let pair (x : ![2]{Int}) : ![∞]{(Int * Int)} = !(x,x)

let non_restricted (x : ![∞]{Int}) : (Int * Int * Int) = (x,x,x)

let pair_apply : ![∞]{(Int * Int)} = pair (id !1)
